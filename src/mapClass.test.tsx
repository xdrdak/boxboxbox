import { mapClass } from './mapClass';

describe('the function mapClass', () => {
  it('should have generated a function', () => {
    const mapClassType = typeof mapClass({
      transformer: 'ma',
    });

    expect(mapClassType).toBe('function');
  });

  describe('the function generated by mapClass', () => {
    it('should prefix a string value with our string transformer', () => {
      const mapperFunction = mapClass({
        transformer: 'ma',
      });

      const result = mapperFunction('3');
      expect(result).toBe('ma3');
    });

    it('should prefix using our custom function transformer', () => {
      const mapperFunction = mapClass({
        transformer: value => `w-${value}`,
      });

      const result = mapperFunction('3');
      expect(result).toBe('w-3');
    });

    it('should support passing down arrays when using a string transformer', () => {
      const mapperFunction = mapClass({
        transformer: 'w',
      });

      const result = mapperFunction(['1', '2']);
      expect(result).toBe('w1 w2');
    });

    describe('the responsification when using string transformers', () => {
      const mapperFunction = mapClass({
        transformer: 'w',
        responsive: true,
      });

      it('should simply output the regular breakpoint when a string is passed', () => {
        expect(mapperFunction('1')).toBe('w1');
      });

      it('should simply output the regular breakpoint when an array of 1 string is passed', () => {
        expect(mapperFunction(['1'])).toBe('w1');
      });

      it('should simply output the regular and medium breakpoint when an array of 2 string is passed', () => {
        expect(mapperFunction(['1', '2'])).toBe('w1 w2-m');
      });

      it('should simply output the regular, medium and the large breakpoint when an array of 3 string is passed', () => {
        expect(mapperFunction(['1', '2', '3'])).toBe('w1 w2-m w3-l');
      });

      it('should disregard values after the 3rd index', () => {
        expect(mapperFunction(['1', '2', '3', '4'])).toBe('w1 w2-m w3-l');
      });
    });

    describe('the responsification when using function transformers', () => {
      const mapperFunction = mapClass({
        transformer: value => `w-${value}`,
        responsive: true,
      });

      it('should simply output the regular breakpoint when a string is passed', () => {
        expect(mapperFunction('1')).toBe('w-1');
      });

      it('should simply output the regular breakpoint when an array of 1 string is passed', () => {
        expect(mapperFunction(['1'])).toBe('w-1');
      });

      it('should simply output the regular and medium breakpoint when an array of 2 string is passed', () => {
        expect(mapperFunction(['1', '2'])).toBe('w-1 w-2-m');
      });

      it('should simply output the regular, medium and the large breakpoint when an array of 3 string is passed', () => {
        expect(mapperFunction(['1', '2', '3'])).toBe('w-1 w-2-m w-3-l');
      });

      it('should disregard values after the 3rd index', () => {
        expect(mapperFunction(['1', '2', '3', '4'])).toBe('w-1 w-2-m w-3-l');
      });
    });
  });
});
